# Copyright 2022 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
name: Release

"on":
  push:
    branches:
      - main

jobs:
  release:

    name: Release
    runs-on: ubuntu-latest

    env:
      IMAGE_REPO: quay.io/hacbs-contract/ec-cli
      TAG: ${{ github.sha }}
      TASK: task/0.1/verify-enterprise-contract.yaml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: release-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            release-${{ runner.os }}-go-

      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod

      - name: Download go dependencies
        run: |
          go mod download
          go mod download -modfile tools/go.mod
          go mod download -modfile acceptance/go.mod

      - name: Build distribution
        run: make dist

      - name: Delete snapshot release and tag
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          RELEASE_ID=$(gh api \
            -H 'Accept: application/vnd.github.v3+json' \
            /repos/${{ github.repository }}/releases \
            -q '.[] | select(.tag_name == "snapshot") | .id')
          [[ -n "${RELEASE_ID}" ]] && gh api --method DELETE \
            -H 'Accept: application/vnd.github.v3+json' \
            "/repos/${{ github.repository }}/releases/${RELEASE_ID}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a -f -m 'Development snapshot' snapshot
          git push -f --tags

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          name: Development snapshot
          body: Unstable development snapshot release.
          tag_name: snapshot
          generate_release_notes: true
          files: dist/*

      - name: Registry login
        run: podman login -u ${{ secrets.BUNDLE_PUSH_USER  }} -p ${{ secrets.BUNDLE_PUSH_PASS }} quay.io

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Create and push image
        run: make dist-image-push IMAGE_TAG=$TAG IMAGE_REPO=$IMAGE_REPO

      - name: Create and push the tekton bundle
        run: make task-bundle-snapshot TASK_TAG=$TAG TASK=<( yq e ".spec.steps[].image? = \"$IMAGE_REPO:$TAG\"" $TASK)

      - name: Update infra-deployments
        env:
          EC_AUTOMATION_KEY: ${{ secrets.EC_AUTOMATION_KEY }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          APP_INSTALL_ID: 32872589
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset

          function createJWT() {
            local header=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | sed s/\+/-/ | sed -E s/=+$//)
            local now_utc=$(date --utc +%s)
            local payload=$(echo -n '{"iat":'$((now_utc - 60))',"exp":'$((now_utc + 120))',"iss":245286}' | base64 | sed s/\+/-/ | sed -E s/=+$//)
            local signature=$(echo -n "${header}.${payload}" | openssl dgst -sha256 -binary -sign <(echo "${EC_AUTOMATION_KEY}")| base64 | tr -d '\n=' | tr -- '+/' '-_')
            echo "${header}.${payload}.${signature}"
          }

          GITHUB_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $(createJWT)" -H "Accept: application/vnd.github+json" "https://api.github.com/app/installations/${APP_INSTALL_ID}/access_tokens" | jq -r .token) \
          hack/pr-infra-deployments.sh "${TAG}"
